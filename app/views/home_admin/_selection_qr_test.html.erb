<%# test code demo zxing %>

    <div>
        <a class="button" id="startButton">Start</a>
        <a class="button" id="resetButton">Reset</a>
      </div>

      <div>
        <video id="video" width="300" height="200" style="border: 1px solid gray"></video>
      </div>

      <div id="sourceSelectPanel" style="display:none">
        <label for="sourceSelect">Change video source:</label>
        <select id="sourceSelect" style="max-width:400px">
        </select>
      </div>

      <div style="display: table">
        <label for="decoding-style"> Decoding Style:</label>
        <select id="decoding-style" size="1">
          <option value="once">Decode once</option>
          <option value="continuously">Decode continuously</option>
        </select>
      </div>

      <label>Result:</label>
      <pre><code id="result"></code></pre>

      <p>See the <a href="https://github.com/zxing-js/library/tree/master/docs/examples/qr-camera/">source code</a> for
        this example.</p>
    </section>

    <footer class="footer">
      <section class="container">
        <p>ZXing TypeScript Demo. Licensed under the <a target="_blank"
            href="https://github.com/zxing-js/library#license" title="MIT">MIT</a>.</p>
      </section>
    </footer>

  </main>

  <script type="text/javascript" src="https://unpkg.com/@zxing/library@latest"></script>
  <script type="text/javascript">

  
    function decodeOnce(codeReader, selectedDeviceId) {
      codeReader.decodeFromInputVideoDevice(selectedDeviceId, 'video').then((result) => {
        console.log(result)
        document.getElementById('result').textContent = result.text
      }).catch((err) => {
        console.error(err)
        document.getElementById('result').textContent = err
      })
    }

    function decodeContinuously(codeReader, selectedDeviceId) {
      codeReader.decodeFromInputVideoDeviceContinuously(selectedDeviceId, 'video', (result, err) => {
        if (result) {
          // properly decoded qr code
          console.log('Found QR code!', result)
          document.getElementById('result').textContent = result.text
        }

        if (err) {

          if (err instanceof ZXing.NotFoundException) {
            console.log('No QR code found.')
          }

          if (err instanceof ZXing.ChecksumException) {
            console.log('A code was found, but it\'s read value was not valid.')
          }

          if (err instanceof ZXing.FormatException) {
            console.log('A code was found, but it was in a invalid format.')
          }
        }
      })
    }

  window.addEventListener('load', function () {
    let selectedDeviceId;
    const codeReader = new ZXing.BrowserQRCodeReader();
    console.log('ZXing code reader initialized');

    const startButton = document.getElementById('startButton');

    // Request permission to access the camera when the start button is clicked
    startButton.addEventListener('click', async () => {
      try {
        // Request permission to use video input (camera)
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        const videoInputDevices = await codeReader.getVideoInputDevices();

        const sourceSelect = document.getElementById('sourceSelect');
        sourceSelect.innerHTML = ''; // Clear previous options

        videoInputDevices.forEach((device) => {
          const sourceOption = document.createElement('option');
          sourceOption.text = device.label;
          sourceOption.value = device.deviceId;
          sourceSelect.appendChild(sourceOption);
        });

        sourceSelect.onchange = () => {
          selectedDeviceId = sourceSelect.value;
        };

        const sourceSelectPanel = document.getElementById('sourceSelectPanel');
        sourceSelectPanel.style.display = 'block';

        selectedDeviceId = videoInputDevices[0].deviceId; // Default to the first device

        const decodingStyle = document.getElementById('decoding-style').value;

        if (decodingStyle == "once") {
          decodeOnce(codeReader, selectedDeviceId);
        } else {
          decodeContinuously(codeReader, selectedDeviceId);
        }

        console.log(`Started decode from camera with id ${selectedDeviceId}`);
      } catch (error) {
        console.error('Error accessing camera:', error);
        // Handle error (e.g., show error message to user)
      }
    });

    document.getElementById('resetButton').addEventListener('click', () => {
      codeReader.reset();
      document.getElementById('result').textContent = '';
      console.log('Reset.');
    });
  });

</script>