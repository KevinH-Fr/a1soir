<div class="chartBox mx-auto">
  <canvas id="myChartLineCaProfiles"></canvas>
</div>

<%# 1. Récupérer toutes les dates triées %>
<% all_dates = @stats_par_profile.flat_map { |stat| stat[:ca_par_date].keys }.uniq.sort %>

<%# 2. Construire les datasets (lignes du graphe) %>
<% datasets = @stats_par_profile.map do |stat| 
  {
    label: stat[:profile],
    data: all_dates.map { |date| stat[:ca_par_date][date] || 0 },
    borderColor: stat[:couleur],
    backgroundColor: stat[:couleur],
    tension: 0.4,
    pointBorderWidth: 2,
    pointHoverBorderWidth: 6
  }
end %>

<script>
  const allDates = <%= all_dates.to_json.html_safe %>;

  const dataLinePaiementsProfiles = {
    labels: allDates,
    datasets: <%= datasets.to_json.html_safe %>
  };

  let delayedLinePaiementsProfiles;

  const configLinePaiementsProfiles = {
    type: 'line',
    data: dataLinePaiementsProfiles,
    options: {
      aspectRatio: 1,
      animation: {
        onComplete: () => {
          delayedLinePaiementsProfiles = true;
        },
        delay: (context) => {
          let delay = 0;
          if (context.type === 'data' && context.mode === 'default' && !delayedLinePaiementsProfiles) {
            delay = context.dataIndex * 100 + context.datasetIndex * 10;
          }
          return delay;
        }
      },
      plugins: {
        legend: {
          display: true,
          position: 'bottom'
        },
        title: {
          display: true,
          text: "Chiffre d'affaires",
          font: {
            size: 14
          },
        },

      },
      aspectRatio: 1,
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            callback: function(value) {
              return value ;
            }
          }
        }
      }
    }
  };

  var myChartLineCaProfiles = new Chart(
    document.getElementById('myChartLineCaProfiles'),
    configLinePaiementsProfiles
  );
</script>
